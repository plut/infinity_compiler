window.SIDEBAR_ITEMS = {"attr":[["ext","See crate docs for more info."]],"derive":[["Newtype","This macro derives several traits for a newtype:"],["Pack","Derivation of `Pack`."],["SqlRow",""]],"enum":[["Error",""],["SeekFrom","Enumeration of possible methods to seek within an I/O object."]],"fn":[["any_ok",""]],"macro":[["Debug","Derive macro generating an impl of the trait `Debug`."],["debug","Logs a message at the debug level."],["error","Logs a message at the error level."],["info","Logs a message at the info level."],["lazy_format","Lazily format something. Essentially the same as `format!`, except that instead of formatting its arguments to a string, it captures them in an opaque struct, which can be formatted later. This allows you to build up formatting operations without any intermediary allocations or extra formatting calls. Also supports lazy conditional and looping constructs."],["make_lazy_format","Low level constructor for lazy format instances. Create a lazy formatter with a custom closure as its `Display` implementation, for complete control over formatting behavior at write time."],["trace","Logs a message at the trace level."],["uwrite","Just like `write!` except that it is unwrapped."],["uwriteln",""],["warn","Logs a message at the warn level."]],"mod":[["fmt","Utilities for formatting and printing `String`s."],["fs","Filesystem manipulation operations."],["io","Traits, helpers, and type definitions for core I/O functionality."]],"struct":[["Connection","A connection to a SQLite database."],["Cursor","A `Cursor` wraps an in-memory buffer and provides it with a [`Seek`] implementation."],["File","An object providing access to an open file on the filesystem."],["Formatter","Configuration for formatting."],["Path","A slice of a path (akin to [`str`])."],["PathBuf","An owned, mutable path (akin to [`String`])."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["Row","A single result row of a query."],["Statement","A prepared statement."]],"trait":[["Context","Provides the `context` method for `Result`."],["Debug","`?` formatting."],["Deref","Used for immutable dereferencing operations, like `*v`."],["Display","Format trait for an empty format, `{}`."],["FWrite","A trait for writing or formatting into Unicode-accepting buffers or streams."],["Read","The `Read` trait allows for reading bytes from a source."],["Seek","The `Seek` trait provides a cursor which can be moved within a stream of bytes."],["Write","A trait for objects which are byte-oriented sinks."]],"type":[["Result","`Result<T, Error>`"]]};